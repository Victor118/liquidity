// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liquidity/v1beta1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the liquidity module.
type Params struct {
	// list of available pool types
	PoolTypes []PoolType `protobuf:"bytes,1,rep,name=pool_types,json=poolTypes,proto3" json:"pool_types" yaml:"pool_types"`
	// Minimum number of coins to be deposited to the liquidity pool on pool
	// creation.
	MinInitDepositAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=min_init_deposit_amount,json=minInitDepositAmount,proto3,customtype=cosmossdk.io/math.Int" json:"min_init_deposit_amount" yaml:"min_init_deposit_amount"`
	// Initial mint amount of pool coins upon pool creation.
	InitPoolCoinMintAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=init_pool_coin_mint_amount,json=initPoolCoinMintAmount,proto3,customtype=cosmossdk.io/math.Int" json:"init_pool_coin_mint_amount" yaml:"init_pool_coin_mint_amount"`
	// Limit the size of each liquidity pool to minimize risk. In development, set
	// to 0 for no limit. In production, set a limit.
	MaxReserveCoinAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_reserve_coin_amount,json=maxReserveCoinAmount,proto3,customtype=cosmossdk.io/math.Int" json:"max_reserve_coin_amount" yaml:"max_reserve_coin_amount"`
	// Fee paid to create a Liquidity Pool. Set a fee to prevent spamming.
	PoolCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee" yaml:"pool_creation_fee"`
	// Swap fee rate for every executed swap.
	SwapFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=swap_fee_rate,json=swapFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"swap_fee_rate" yaml:"swap_fee_rate"`
	// Reserve coin withdrawal with less proportion by withdrawFeeRate.
	WithdrawFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=withdraw_fee_rate,json=withdrawFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"withdraw_fee_rate" yaml:"withdraw_fee_rate"`
	// Maximum ratio of reserve coins that can be ordered at a swap order.
	MaxOrderAmountRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=max_order_amount_ratio,json=maxOrderAmountRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_order_amount_ratio" yaml:"max_order_amount_ratio"`
	// The smallest unit batch height for every liquidity pool.
	UnitBatchHeight uint32 `protobuf:"varint,9,opt,name=unit_batch_height,json=unitBatchHeight,proto3" json:"unit_batch_height,omitempty" yaml:"unit_batch_height"`
	// Circuit breaker enables or disables transaction messages in liquidity
	// module.
	CircuitBreakerEnabled bool                        `protobuf:"varint,10,opt,name=circuit_breaker_enabled,json=circuitBreakerEnabled,proto3" json:"circuit_breaker_enabled,omitempty" yaml:"circuit_breaker_enabled"`
	BuildersAddresses     []WeightedAddress           `protobuf:"bytes,11,rep,name=builders_addresses,json=buildersAddresses,proto3" json:"builders_addresses" yaml:"builders_addresses"`
	BuildersCommission    cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=builders_commission,json=buildersCommission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"builders_commission" yaml:"builders_commission"`
	// Permissioned address that can create pools.
	PoolPermissionedCreatorAddress string `protobuf:"bytes,13,opt,name=pool_permissioned_creator_address,json=poolPermissionedCreatorAddress,proto3" json:"pool_permissioned_creator_address,omitempty" yaml:"pool_permissioned_creator_address"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_89b09326e602d253, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPoolTypes() []PoolType {
	if m != nil {
		return m.PoolTypes
	}
	return nil
}

func (m *Params) GetPoolCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PoolCreationFee
	}
	return nil
}

func (m *Params) GetUnitBatchHeight() uint32 {
	if m != nil {
		return m.UnitBatchHeight
	}
	return 0
}

func (m *Params) GetCircuitBreakerEnabled() bool {
	if m != nil {
		return m.CircuitBreakerEnabled
	}
	return false
}

func (m *Params) GetBuildersAddresses() []WeightedAddress {
	if m != nil {
		return m.BuildersAddresses
	}
	return nil
}

func (m *Params) GetPoolPermissionedCreatorAddress() string {
	if m != nil {
		return m.PoolPermissionedCreatorAddress
	}
	return ""
}

// Structure for the pool type to distinguish the characteristics of the reserve
// pools.
type PoolType struct {
	// This is the id of the pool_type that is used as pool_type_id for pool
	// creation. In this version, only pool-type-id 1 is supported.
	// {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	// name of the pool type.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// minimum number of reserveCoins for LiquidityPoolType, only 2 reserve coins
	// are supported.
	MinReserveCoinNum uint32 `protobuf:"varint,3,opt,name=min_reserve_coin_num,json=minReserveCoinNum,proto3" json:"min_reserve_coin_num,omitempty" yaml:"min_reserve_coin_num"`
	// maximum number of reserveCoins for LiquidityPoolType, only 2 reserve coins
	// are supported.
	MaxReserveCoinNum uint32 `protobuf:"varint,4,opt,name=max_reserve_coin_num,json=maxReserveCoinNum,proto3" json:"max_reserve_coin_num,omitempty" yaml:"max_reserve_coin_num"`
	// description of the pool type.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *PoolType) Reset()         { *m = PoolType{} }
func (m *PoolType) String() string { return proto.CompactTextString(m) }
func (*PoolType) ProtoMessage()    {}
func (*PoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_89b09326e602d253, []int{1}
}
func (m *PoolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolType.Merge(m, src)
}
func (m *PoolType) XXX_Size() int {
	return m.Size()
}
func (m *PoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolType.DiscardUnknown(m)
}

var xxx_messageInfo_PoolType proto.InternalMessageInfo

func (m *PoolType) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PoolType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PoolType) GetMinReserveCoinNum() uint32 {
	if m != nil {
		return m.MinReserveCoinNum
	}
	return 0
}

func (m *PoolType) GetMaxReserveCoinNum() uint32 {
	if m != nil {
		return m.MaxReserveCoinNum
	}
	return 0
}

func (m *PoolType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// WeightedAddress represents an address with a weight assigned to it.
// The weight is used to determine the proportion of the total minted
// tokens to be minted to the address.
type WeightedAddress struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Weight  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight" yaml:"weight"`
}

func (m *WeightedAddress) Reset()         { *m = WeightedAddress{} }
func (m *WeightedAddress) String() string { return proto.CompactTextString(m) }
func (*WeightedAddress) ProtoMessage()    {}
func (*WeightedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_89b09326e602d253, []int{2}
}
func (m *WeightedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedAddress.Merge(m, src)
}
func (m *WeightedAddress) XXX_Size() int {
	return m.Size()
}
func (m *WeightedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedAddress proto.InternalMessageInfo

func (m *WeightedAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "liquidity.v1beta1.Params")
	proto.RegisterType((*PoolType)(nil), "liquidity.v1beta1.PoolType")
	proto.RegisterType((*WeightedAddress)(nil), "liquidity.v1beta1.WeightedAddress")
}

func init() { proto.RegisterFile("liquidity/v1beta1/params.proto", fileDescriptor_89b09326e602d253) }

var fileDescriptor_89b09326e602d253 = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xbf, 0x53, 0x1b, 0x47,
	0x14, 0xe6, 0x30, 0xc6, 0xb0, 0x8a, 0xa2, 0xd1, 0x1a, 0xe3, 0x03, 0xe2, 0x3b, 0xd8, 0x34, 0x2a,
	0x1c, 0x29, 0x24, 0x29, 0x3c, 0xa4, 0xc8, 0x70, 0x10, 0x8f, 0x9d, 0x21, 0x09, 0xb3, 0x93, 0x1f,
	0x33, 0x6e, 0x6e, 0x56, 0x77, 0x1b, 0x69, 0x07, 0xdd, 0xed, 0x65, 0x77, 0x85, 0x50, 0x93, 0xbf,
	0x21, 0x33, 0x6e, 0x52, 0xba, 0x4e, 0x99, 0xff, 0x20, 0x9d, 0x4b, 0x97, 0x99, 0x14, 0x97, 0x0c,
	0x34, 0xa9, 0xf5, 0x17, 0x64, 0xf6, 0x87, 0x7e, 0x80, 0x20, 0x26, 0x15, 0xc7, 0x7b, 0xdf, 0x7e,
	0xdf, 0x7b, 0xfb, 0xde, 0x7e, 0x00, 0x82, 0x1e, 0xfb, 0xb1, 0xcf, 0x52, 0xa6, 0x86, 0xad, 0xd3,
	0xdd, 0x36, 0x55, 0x64, 0xb7, 0x55, 0x10, 0x41, 0x32, 0xd9, 0x2c, 0x04, 0x57, 0x1c, 0xd6, 0x27,
	0xf9, 0xa6, 0xcb, 0x6f, 0xae, 0x75, 0x78, 0x87, 0x9b, 0x6c, 0x4b, 0x7f, 0x59, 0xe0, 0x66, 0x90,
	0x70, 0x99, 0x71, 0xd9, 0x6a, 0x13, 0x49, 0x27, 0x54, 0x09, 0x67, 0xb9, 0xcd, 0xa3, 0xdf, 0x2b,
	0x60, 0xf9, 0xd8, 0x30, 0xc3, 0x6f, 0x01, 0x28, 0x38, 0xef, 0xc5, 0x6a, 0x58, 0x50, 0xe9, 0x7b,
	0xdb, 0x77, 0x1a, 0x95, 0x8f, 0xb6, 0x9a, 0x73, 0x42, 0xcd, 0x63, 0xce, 0x7b, 0xdf, 0x0c, 0x0b,
	0x1a, 0x6d, 0xbc, 0x2e, 0xc3, 0x85, 0x51, 0x19, 0xd6, 0x87, 0x24, 0xeb, 0xed, 0xa1, 0xe9, 0x61,
	0x84, 0x57, 0x0b, 0x07, 0x92, 0xf0, 0x14, 0x3c, 0xcc, 0x58, 0x1e, 0xb3, 0x9c, 0xa9, 0x38, 0xa5,
	0x05, 0x97, 0x4c, 0xc5, 0x24, 0xe3, 0xfd, 0x5c, 0xf9, 0x8b, 0xdb, 0x5e, 0x63, 0x35, 0xfa, 0x4c,
	0xd3, 0xfc, 0x59, 0x86, 0x0f, 0x6c, 0xa9, 0x32, 0x3d, 0x69, 0x32, 0xde, 0xca, 0x88, 0xea, 0x36,
	0x9f, 0xe7, 0x6a, 0x54, 0x86, 0x81, 0xe5, 0xbf, 0x81, 0x05, 0xe1, 0xb5, 0x8c, 0xe5, 0xcf, 0x73,
	0xa6, 0x0e, 0x6d, 0x7c, 0xdf, 0x84, 0xe1, 0x4f, 0x60, 0xd3, 0xa0, 0x4d, 0x59, 0xba, 0xe3, 0x38,
	0x63, 0xf9, 0x44, 0xfa, 0x8e, 0x91, 0x8e, 0xde, 0x26, 0xbd, 0x63, 0xa5, 0x6f, 0x26, 0x42, 0x78,
	0x5d, 0x27, 0xf5, 0x9d, 0x1c, 0x70, 0x96, 0x7f, 0xc9, 0xf2, 0xb1, 0xbe, 0xee, 0x9b, 0x9c, 0xc5,
	0x82, 0x4a, 0x2a, 0x4e, 0xa9, 0x3d, 0xe8, 0xc4, 0x97, 0xfe, 0x5f, 0xdf, 0xd7, 0xb3, 0xe8, 0xbe,
	0xc9, 0x19, 0xb6, 0x09, 0xad, 0xed, 0x74, 0x5f, 0x7a, 0xa0, 0x6e, 0x4b, 0x15, 0x94, 0x28, 0xc6,
	0xf3, 0xf8, 0x07, 0x4a, 0xfd, 0xbb, 0x66, 0x9c, 0x1b, 0x4d, 0xab, 0xd5, 0xd4, 0xeb, 0x30, 0x19,
	0xa8, 0x3e, 0x1c, 0x1d, 0xb9, 0x61, 0xfa, 0x33, 0xc3, 0x9c, 0x65, 0x40, 0xbf, 0xfe, 0x15, 0x36,
	0x3a, 0x4c, 0x75, 0xfb, 0xed, 0x66, 0xc2, 0xb3, 0x96, 0xdb, 0x2b, 0xfb, 0xe3, 0x03, 0x99, 0x9e,
	0xb4, 0xcc, 0xe8, 0x0d, 0x99, 0xc4, 0x35, 0x7d, 0xfe, 0xc0, 0x1d, 0x7f, 0x4a, 0x29, 0x8c, 0x41,
	0x55, 0x0e, 0x48, 0xa1, 0x99, 0x62, 0x41, 0x14, 0xf5, 0x97, 0xcd, 0x1d, 0x7c, 0xea, 0xee, 0x60,
	0x6b, 0xfe, 0x0e, 0x8e, 0x68, 0x87, 0x24, 0xc3, 0x43, 0x9a, 0x8c, 0xca, 0x70, 0xcd, 0x16, 0x75,
	0x89, 0x01, 0xe1, 0x8a, 0xfe, 0xfd, 0x29, 0xa5, 0x98, 0x28, 0x0a, 0x4f, 0x40, 0x7d, 0xc0, 0x54,
	0x37, 0x15, 0x64, 0x30, 0x15, 0xb9, 0x77, 0xe9, 0xa2, 0xdf, 0x22, 0xe2, 0x3a, 0x9f, 0x63, 0x41,
	0xb8, 0x36, 0x8e, 0x8d, 0xc5, 0x86, 0x60, 0x5d, 0x4f, 0x85, 0x8b, 0x94, 0x0a, 0x37, 0x0e, 0x0d,
	0x65, 0xdc, 0x5f, 0x31, 0x8a, 0x87, 0xb7, 0x53, 0x7c, 0x34, 0x1d, 0xf0, 0x3c, 0x15, 0xc2, 0xf7,
	0x33, 0x72, 0xf6, 0xb5, 0x8e, 0xdb, 0xc9, 0x62, 0x1d, 0x85, 0xcf, 0x40, 0xbd, 0xaf, 0xb7, 0xb1,
	0x4d, 0x54, 0xd2, 0x8d, 0xbb, 0x94, 0x75, 0xba, 0xca, 0x5f, 0xdd, 0xf6, 0x1a, 0xd5, 0xe8, 0xbd,
	0x69, 0x13, 0x73, 0x10, 0x84, 0x6b, 0x3a, 0x16, 0xe9, 0xd0, 0x33, 0x13, 0x81, 0x2f, 0xc0, 0xc3,
	0x84, 0x89, 0xa4, 0xaf, 0x91, 0x82, 0x92, 0x13, 0x2a, 0x62, 0x9a, 0x93, 0x76, 0x8f, 0xa6, 0x3e,
	0xd8, 0xf6, 0x1a, 0x2b, 0x11, 0x9a, 0xee, 0xe0, 0x0d, 0x40, 0x84, 0x1f, 0xb8, 0x4c, 0x64, 0x13,
	0x9f, 0xdb, 0x38, 0x54, 0x00, 0xb6, 0xfb, 0xac, 0x97, 0x52, 0x21, 0x63, 0x92, 0xa6, 0x82, 0x4a,
	0x49, 0xa5, 0x5f, 0x31, 0x4b, 0x88, 0xae, 0xf1, 0x94, 0xef, 0x4d, 0x49, 0x34, 0xdd, 0xb7, 0xd8,
	0x68, 0xc7, 0x6d, 0xe3, 0x86, 0x95, 0x9f, 0xe7, 0x42, 0xb8, 0x3e, 0x0e, 0xee, 0x8f, 0x63, 0x50,
	0x80, 0xfb, 0x13, 0x64, 0xc2, 0xb3, 0x8c, 0x49, 0xc9, 0x78, 0xee, 0xbf, 0x63, 0x66, 0xb2, 0x7f,
	0xbb, 0x99, 0x6c, 0x5e, 0x51, 0x9c, 0xf2, 0x20, 0x3c, 0xe9, 0xe9, 0x60, 0x12, 0x84, 0x03, 0xb0,
	0x63, 0xde, 0x4a, 0x41, 0x85, 0x0b, 0xd1, 0xd4, 0x3e, 0x1c, 0x2e, 0xc6, 0xe5, 0xfa, 0x55, 0x53,
	0xc1, 0xe3, 0x51, 0x19, 0x36, 0x66, 0x9e, 0xd7, 0x7f, 0x1d, 0x41, 0x38, 0xd0, 0x98, 0xe3, 0x19,
	0xc8, 0x81, 0x45, 0xb8, 0x76, 0xf7, 0x56, 0x7e, 0x79, 0x15, 0x2e, 0xfc, 0xf3, 0x2a, 0xf4, 0xd0,
	0x6f, 0x8b, 0x60, 0x65, 0x6c, 0xca, 0xf0, 0x11, 0x58, 0x64, 0xa9, 0xef, 0x99, 0x85, 0xa8, 0x8e,
	0xca, 0x70, 0xd5, 0x39, 0x58, 0x8a, 0xf0, 0x22, 0x4b, 0xe1, 0xfb, 0x60, 0x29, 0x27, 0x19, 0x75,
	0xd6, 0x5b, 0x1b, 0x95, 0x61, 0xc5, 0x02, 0x74, 0x14, 0x61, 0x93, 0x84, 0xc7, 0x40, 0x5b, 0xea,
	0x65, 0xd3, 0xc9, 0xfb, 0x99, 0x31, 0xcd, 0x6a, 0x14, 0x8e, 0xca, 0x70, 0x6b, 0x6a, 0xc9, 0x57,
	0x51, 0x08, 0xd7, 0x33, 0x96, 0xcf, 0xf8, 0xd2, 0x57, 0xfd, 0xcc, 0x30, 0x5e, 0xb5, 0x31, 0xcd,
	0xb8, 0x34, 0xc7, 0x78, 0x0d, 0x4a, 0x33, 0x5e, 0x72, 0x3a, 0xcd, 0xf8, 0x04, 0x54, 0x52, 0x2a,
	0x13, 0xc1, 0x0a, 0x6d, 0x31, 0xfe, 0x5d, 0xd3, 0xcf, 0xfa, 0xa8, 0x0c, 0xa1, 0x25, 0x9a, 0x49,
	0x22, 0x3c, 0x0b, 0xdd, 0x5b, 0x32, 0x97, 0xf6, 0xd2, 0x03, 0xb5, 0x2b, 0x5b, 0x07, 0x1f, 0x83,
	0x7b, 0xe3, 0x89, 0x79, 0x86, 0x0f, 0x8e, 0xca, 0xf0, 0x5d, 0xcb, 0x37, 0x99, 0xcb, 0x18, 0x02,
	0x8f, 0xc0, 0xf2, 0xc0, 0x3e, 0x3f, 0x7b, 0x99, 0x9f, 0xdc, 0x6e, 0xc1, 0xaa, 0xce, 0x66, 0xdc,
	0xb3, 0x74, 0x1c, 0xb6, 0xaa, 0xe8, 0x8b, 0xd7, 0xe7, 0x81, 0xf7, 0xe6, 0x3c, 0xf0, 0xfe, 0x3e,
	0x0f, 0xbc, 0x9f, 0x2f, 0x82, 0x85, 0x37, 0x17, 0xc1, 0xc2, 0x1f, 0x17, 0xc1, 0xc2, 0x8b, 0x0f,
	0x67, 0xbc, 0xf7, 0x3b, 0x96, 0x28, 0x2e, 0x76, 0x77, 0x9f, 0xb4, 0xa6, 0xff, 0x26, 0x9c, 0xcd,
	0x7c, 0x1b, 0x27, 0x6e, 0x2f, 0x9b, 0xbf, 0xf0, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x15,
	0xdc, 0x26, 0x87, 0x4c, 0x08, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PoolTypes) != len(that1.PoolTypes) {
		return false
	}
	for i := range this.PoolTypes {
		if !this.PoolTypes[i].Equal(&that1.PoolTypes[i]) {
			return false
		}
	}
	if !this.MinInitDepositAmount.Equal(that1.MinInitDepositAmount) {
		return false
	}
	if !this.InitPoolCoinMintAmount.Equal(that1.InitPoolCoinMintAmount) {
		return false
	}
	if !this.MaxReserveCoinAmount.Equal(that1.MaxReserveCoinAmount) {
		return false
	}
	if len(this.PoolCreationFee) != len(that1.PoolCreationFee) {
		return false
	}
	for i := range this.PoolCreationFee {
		if !this.PoolCreationFee[i].Equal(&that1.PoolCreationFee[i]) {
			return false
		}
	}
	if !this.SwapFeeRate.Equal(that1.SwapFeeRate) {
		return false
	}
	if !this.WithdrawFeeRate.Equal(that1.WithdrawFeeRate) {
		return false
	}
	if !this.MaxOrderAmountRatio.Equal(that1.MaxOrderAmountRatio) {
		return false
	}
	if this.UnitBatchHeight != that1.UnitBatchHeight {
		return false
	}
	if this.CircuitBreakerEnabled != that1.CircuitBreakerEnabled {
		return false
	}
	if len(this.BuildersAddresses) != len(that1.BuildersAddresses) {
		return false
	}
	for i := range this.BuildersAddresses {
		if !this.BuildersAddresses[i].Equal(&that1.BuildersAddresses[i]) {
			return false
		}
	}
	if !this.BuildersCommission.Equal(that1.BuildersCommission) {
		return false
	}
	if this.PoolPermissionedCreatorAddress != that1.PoolPermissionedCreatorAddress {
		return false
	}
	return true
}
func (this *PoolType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PoolType)
	if !ok {
		that2, ok := that.(PoolType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MinReserveCoinNum != that1.MinReserveCoinNum {
		return false
	}
	if this.MaxReserveCoinNum != that1.MaxReserveCoinNum {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *WeightedAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedAddress)
	if !ok {
		that2, ok := that.(WeightedAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolPermissionedCreatorAddress) > 0 {
		i -= len(m.PoolPermissionedCreatorAddress)
		copy(dAtA[i:], m.PoolPermissionedCreatorAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PoolPermissionedCreatorAddress)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size := m.BuildersCommission.Size()
		i -= size
		if _, err := m.BuildersCommission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.BuildersAddresses) > 0 {
		for iNdEx := len(m.BuildersAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuildersAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.CircuitBreakerEnabled {
		i--
		if m.CircuitBreakerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.UnitBatchHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnitBatchHeight))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.MaxOrderAmountRatio.Size()
		i -= size
		if _, err := m.MaxOrderAmountRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.WithdrawFeeRate.Size()
		i -= size
		if _, err := m.WithdrawFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SwapFeeRate.Size()
		i -= size
		if _, err := m.SwapFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.MaxReserveCoinAmount.Size()
		i -= size
		if _, err := m.MaxReserveCoinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitPoolCoinMintAmount.Size()
		i -= size
		if _, err := m.InitPoolCoinMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinInitDepositAmount.Size()
		i -= size
		if _, err := m.MinInitDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolTypes) > 0 {
		for iNdEx := len(m.PoolTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxReserveCoinNum != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxReserveCoinNum))
		i--
		dAtA[i] = 0x20
	}
	if m.MinReserveCoinNum != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinReserveCoinNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeightedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolTypes) > 0 {
		for _, e := range m.PoolTypes {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinInitDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.InitPoolCoinMintAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxReserveCoinAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.SwapFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WithdrawFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxOrderAmountRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.UnitBatchHeight != 0 {
		n += 1 + sovParams(uint64(m.UnitBatchHeight))
	}
	if m.CircuitBreakerEnabled {
		n += 2
	}
	if len(m.BuildersAddresses) > 0 {
		for _, e := range m.BuildersAddresses {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.BuildersCommission.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.PoolPermissionedCreatorAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *PoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovParams(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MinReserveCoinNum != 0 {
		n += 1 + sovParams(uint64(m.MinReserveCoinNum))
	}
	if m.MaxReserveCoinNum != 0 {
		n += 1 + sovParams(uint64(m.MaxReserveCoinNum))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *WeightedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolTypes = append(m.PoolTypes, PoolType{})
			if err := m.PoolTypes[len(m.PoolTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPoolCoinMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitPoolCoinMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReserveCoinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxReserveCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOrderAmountRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxOrderAmountRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitBatchHeight", wireType)
			}
			m.UnitBatchHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitBatchHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CircuitBreakerEnabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildersAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildersAddresses = append(m.BuildersAddresses, WeightedAddress{})
			if err := m.BuildersAddresses[len(m.BuildersAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildersCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuildersCommission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPermissionedCreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPermissionedCreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReserveCoinNum", wireType)
			}
			m.MinReserveCoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReserveCoinNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReserveCoinNum", wireType)
			}
			m.MaxReserveCoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReserveCoinNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
